// Code generated by gorpc; DO NOT EDIT.
package {{ .PackageName }}

import (
	"context"
	"net/http"

	"github.com/damejeras/gorpc/transport"
	{{ range $import, $name := .Imports }}
	{{ $name }} "{{ $import }}"
	{{ end }}
)

{{ range $service := .Services }}
{{ format_comment_text $service.Comment }}type {{ $service.Name }} interface {
{{- range $method := $service.Methods }}
    {{ format_comment_text $method.Comment -}}
    {{ $method.Name }}(context.Context, {{ $method.InputObject.TypeName }}) (*{{ $method.OutputObject.TypeName }}, error)
{{ end -}}
}
{{ end }}

{{ range $service := .Services }}
type {{ camelize_down $service.Name }}Server struct {
    server transport.Server
    {{ camelize_down $service.Name }} {{ $service.Name }}
}

// Register adds the {{ $service.Name }} to the transport.Server.
func Register{{ $service.Name }}(server transport.Server, {{ camelize_down $service.Name }} {{ $service.Name }}) {
    handler := &{{ camelize_down $service.Name }}Server {
        server: server,
        {{ camelize_down $service.Name }}: {{ camelize_down $service.Name }},
    }
    {{ range $method := $service.Methods }}
    server.Register("{{ $service.Name }}", "{{ $method.Name }}", handler.handle{{ $method.Name }})
    {{- end }}
}
{{ range $method := $service.Methods }}
func (s *{{ camelize_down $service.Name }}Server) handle{{ $method.Name }}(w http.ResponseWriter, r *http.Request) {
    var request {{ $method.InputObject.TypeName }}
    if err := transport.Decode(r, &request); err != nil {
        s.server.OnErr(w, r, err)
        return
    }
    response, err := s.{{ camelize_down $service.Name }}.{{ $method.Name}}(r.Context(), request)
    if err != nil {
        s.server.OnErr(w, r, err)
        return
    }
    if err := transport.Encode(w, r, http.StatusOK, response); err != nil {
        s.server.OnErr(w, r, err)
        return
    }
}
{{ end }}
{{ end }}

{{ range $object := .Objects }}
{{ format_comment_text $object.Comment }}type {{ $object.Name }} struct {
    {{ range $field := $object.Fields }}
    {{ format_comment_text $field.Comment }}{{ $field.Name }}{{ if $field.Type.Multiple }}[]{{ end }} {{ $field.Type.TypeName }} `json:"{{ $field.NameLowerCamel }}{{ if $field.OmitEmpty }},omitempty{{ end }}"`
    {{- end }}
}
{{ end }}
