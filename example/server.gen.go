// Code generated by gorpc; DO NOT EDIT.
package main

import (
	"context"
	"net/http"

	"github.com/damejeras/gorpc/transport"
)

// GreeterService is a polite API for greeting people.
type GreeterService interface {
	// Greet prepares a lovely greeting.
	Greet(context.Context, GreetRequest) (*GreetResponse, error)
}

type greeterServiceServer struct {
	server         transport.Server
	greeterService GreeterService
}

// Register adds the GreeterService to the transport.Server.
func RegisterGreeterService(server transport.Server, greeterService GreeterService) {
	handler := &greeterServiceServer{
		server:         server,
		greeterService: greeterService,
	}

	server.Register("GreeterService", "Greet", handler.handleGreet)
}

func (s *greeterServiceServer) handleGreet(w http.ResponseWriter, r *http.Request) {
	var request GreetRequest
	if err := transport.Decode(r, &request); err != nil {
		s.server.OnErr(w, r, err)
		return
	}
	response, err := s.greeterService.Greet(r.Context(), request)
	if err != nil {
		s.server.OnErr(w, r, err)
		return
	}
	if err := transport.Encode(w, r, http.StatusOK, response); err != nil {
		s.server.OnErr(w, r, err)
		return
	}
}

// GreetRequest is the request object for GreeterService.Greet.
type GreetRequest struct {

	// Name is the person to greet. It is required.
	Name string `json:"name"`
}

// GreetResponse is the response object containing a person's greeting.
type GreetResponse struct {

	// Greeting is a nice message welcoming somebody.
	Greeting string `json:"greeting"`
	// Error is string explaining what went wrong. Empty if everything was fine.
	Error string `json:"error,omitempty"`
}
