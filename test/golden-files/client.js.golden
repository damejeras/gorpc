// Code generated by gorpc; DO NOT EDIT.

'use strict';

// GreeterService is a polite API. You will love it.
export class GreeterService {
    // GetGreetings gets a range of saved Greetings.
	async getGreetings(getGreetingsRequest) {
        const headers = {
			'Accept': 'application/json',
			'Accept-Encoding': 'gzip',
			'Content-Type':	'application/json',
        }
        getGreetingsRequest = getGreetingsRequest || {}
		const response = await fetch('/gorpc/GreeterService.GetGreetings', {
			method: 'POST',
			headers: headers,
			body: JSON.stringify(getGreetingsRequest)
		})
		return response.json().then((json) => {
			if (json.error) {
				throw new Error(json.error)
			}
			return json
		})
    }// Greet creates a Greeting for one or more people.
	async greet(greetRequest) {
        const headers = {
			'Accept': 'application/json',
			'Accept-Encoding': 'gzip',
			'Content-Type':	'application/json',
        }
        greetRequest = greetRequest || {}
		const response = await fetch('/gorpc/GreeterService.Greet', {
			method: 'POST',
			headers: headers,
			body: JSON.stringify(greetRequest)
		})
		return response.json().then((json) => {
			if (json.error) {
				throw new Error(json.error)
			}
			return json
		})
    }
}// Ignorer gets ignored by the tooling.
export class Ignorer {
    	async ignore(ignoreRequest) {
        const headers = {
			'Accept': 'application/json',
			'Accept-Encoding': 'gzip',
			'Content-Type':	'application/json',
        }
        ignoreRequest = ignoreRequest || {}
		const response = await fetch('/gorpc/Ignorer.Ignore', {
			method: 'POST',
			headers: headers,
			body: JSON.stringify(ignoreRequest)
		})
		return response.json().then((json) => {
			if (json.error) {
				throw new Error(json.error)
			}
			return json
		})
    }
}// Welcomer welcomes people.
export class Welcomer {
    // Welcome makes a welcome message for somebody.
	async welcome(welcomeRequest) {
        const headers = {
			'Accept': 'application/json',
			'Accept-Encoding': 'gzip',
			'Content-Type':	'application/json',
        }
        welcomeRequest = welcomeRequest || {}
		const response = await fetch('/gorpc/Welcomer.Welcome', {
			method: 'POST',
			headers: headers,
			body: JSON.stringify(welcomeRequest)
		})
		return response.json().then((json) => {
			if (json.error) {
				throw new Error(json.error)
			}
			return json
		})
    }
}
