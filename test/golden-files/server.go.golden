// Code generated by gorpc; DO NOT EDIT.
package main

import (
	"context"
	"net/http"

	"github.com/damejeras/gorpc/transport"
	
	services "github.com/damejeras/gorpc/test/services"
	
)


// GreeterService is a polite API. You will love it.
type GreeterService interface {
    // GetGreetings gets a range of saved Greetings.
GetGreetings(context.Context, GetGreetingsRequest) (*GetGreetingsResponse, error)

    // Greet creates a Greeting for one or more people.
Greet(context.Context, GreetRequest) (*GreetResponse, error)
}

// Ignorer gets ignored by the tooling.
type Ignorer interface {
    Ignore(context.Context, IgnoreRequest) (*IgnoreResponse, error)
}

// Welcomer welcomes people.
type Welcomer interface {
    // Welcome makes a welcome message for somebody.
Welcome(context.Context, WelcomeRequest) (*WelcomeResponse, error)
}



type greeterServiceServer struct {
    server transport.Server
    greeterService GreeterService
}

// RegisterGreeterService adds the GreeterService to the transport.Server.
func RegisterGreeterService(server transport.Server, greeterService GreeterService) {
    handler := &greeterServiceServer {
        server: server,
        greeterService: greeterService,
    }
    
    server.Register("GreeterService", "GetGreetings", handler.handleGetGreetings)
    server.Register("GreeterService", "Greet", handler.handleGreet)
}

func (s *greeterServiceServer) handleGetGreetings(w http.ResponseWriter, r *http.Request) {
    var request GetGreetingsRequest
    if err := transport.Decode(r, &request); err != nil {
        s.server.OnErr(w, r, err)
        return
    }
    response, err := s.greeterService.GetGreetings(r.Context(), request)
    if err != nil {
        s.server.OnErr(w, r, err)
        return
    }
    if err := transport.Encode(w, r, http.StatusOK, response); err != nil {
        s.server.OnErr(w, r, err)
        return
    }
}

func (s *greeterServiceServer) handleGreet(w http.ResponseWriter, r *http.Request) {
    var request GreetRequest
    if err := transport.Decode(r, &request); err != nil {
        s.server.OnErr(w, r, err)
        return
    }
    response, err := s.greeterService.Greet(r.Context(), request)
    if err != nil {
        s.server.OnErr(w, r, err)
        return
    }
    if err := transport.Encode(w, r, http.StatusOK, response); err != nil {
        s.server.OnErr(w, r, err)
        return
    }
}


type ignorerServer struct {
    server transport.Server
    ignorer Ignorer
}

// RegisterIgnorer adds the Ignorer to the transport.Server.
func RegisterIgnorer(server transport.Server, ignorer Ignorer) {
    handler := &ignorerServer {
        server: server,
        ignorer: ignorer,
    }
    
    server.Register("Ignorer", "Ignore", handler.handleIgnore)
}

func (s *ignorerServer) handleIgnore(w http.ResponseWriter, r *http.Request) {
    var request IgnoreRequest
    if err := transport.Decode(r, &request); err != nil {
        s.server.OnErr(w, r, err)
        return
    }
    response, err := s.ignorer.Ignore(r.Context(), request)
    if err != nil {
        s.server.OnErr(w, r, err)
        return
    }
    if err := transport.Encode(w, r, http.StatusOK, response); err != nil {
        s.server.OnErr(w, r, err)
        return
    }
}


type welcomerServer struct {
    server transport.Server
    welcomer Welcomer
}

// RegisterWelcomer adds the Welcomer to the transport.Server.
func RegisterWelcomer(server transport.Server, welcomer Welcomer) {
    handler := &welcomerServer {
        server: server,
        welcomer: welcomer,
    }
    
    server.Register("Welcomer", "Welcome", handler.handleWelcome)
}

func (s *welcomerServer) handleWelcome(w http.ResponseWriter, r *http.Request) {
    var request WelcomeRequest
    if err := transport.Decode(r, &request); err != nil {
        s.server.OnErr(w, r, err)
        return
    }
    response, err := s.welcomer.Welcome(r.Context(), request)
    if err != nil {
        s.server.OnErr(w, r, err)
        return
    }
    if err := transport.Encode(w, r, http.StatusOK, response); err != nil {
        s.server.OnErr(w, r, err)
        return
    }
}




// GetGreetingsRequest is the request object for GreeterService.GetGreetings.
type GetGreetingsRequest struct {
    
    // Page describes which page of data to get.
Page services.Page `json:"page"`
}

// GetGreetingsResponse is the respponse object for GreeterService.GetGreetings.
type GetGreetingsResponse struct {
    
    Greetings[] Greeting `json:"greetings"`
    // Error is string explaining what went wrong. Empty if everything was fine.
Error string `json:"error,omitempty"`
}

// GreetRequest is the request object for GreeterService.Greet.
type GreetRequest struct {
    
    // Names are the names of the people to greet.
Names[] string `json:"names"`
}

// GreetResponse is the response object containing a person's greeting.
type GreetResponse struct {
    
    // Greeting is the generated Greeting.
Greeting Greeting `json:"greeting"`
    // Error is string explaining what went wrong. Empty if everything was fine.
Error string `json:"error,omitempty"`
}

// Greeting contains the pleasentry.
type Greeting struct {
    
    // Text is the message.
Text string `json:"text"`
}

// IgnoreRequest should get ignored.
type IgnoreRequest struct {
    
}

// IgnoreResponse should get ignored.
type IgnoreResponse struct {
    
    // Error is string explaining what went wrong. Empty if everything was fine.
Error string `json:"error,omitempty"`
}

type Page struct {
    
    Cursor string `json:"cursor"`
    OrderField string `json:"orderField"`
    OrderAsc bool `json:"orderAsc"`
}

// WelcomeRequest is the request object for Welcomer.Welcome.
type WelcomeRequest struct {
    
    // To is the address of the person to send the message to.
To string `json:"to"`
    // Name is the name of the person to welcome.
Name string `json:"name"`
    // The number of times to send the message.
Times int `json:"times"`
    // NewCustomer indicates whether this is a new customer or not.
NewCustomer bool `json:"newCustomer"`
}

// WelcomeResponse is the response object for Welcomer.Welcome.
type WelcomeResponse struct {
    
    // Message is the welcome message.
Message string `json:"message"`
    // Error is string explaining what went wrong. Empty if everything was fine.
Error string `json:"error,omitempty"`
}

