# Code generated by gorpc; DO NOT EDIT.

import requests
import json

class Client:
	def __init__(self, endpoint="http://localhost:8888/api", apiKey=""):
		self.endpoint = endpoint
		self.apiKey = apiKey
		if self.endpoint == "":
			raise FieldError(field="endpoint", message="endpoint missing")

class GreeterService:
	"""GreeterService is a polite API. You will love it."""

	def __init__(self, client):
		self.client = client
	
	def getGreetings(self, getGreetingsRequest):
		"""GetGreetings gets a range of saved Greetings."""
		url = "{}/GreeterService.GetGreetings".format(self.client.endpoint)
		headers = {
			'Accept': 'application/json; charset=utf8',
			'Content-Type': 'application/json; charset=utf8',
			'X-API-Key': self.client.apiKey,
		}
		r = requests.post(url, json=getGreetingsRequest, headers=headers)
		if r.status_code != 200:
			raise OtoError(message="status code: {}".format(r.status_code))
		j = r.json()
		if 'error' in j:
			err = j.get('error')
			if err != '':
				raise OtoError(message=err)
		return j
	
	def greet(self, greetRequest):
		"""Greet creates a Greeting for one or more people."""
		url = "{}/GreeterService.Greet".format(self.client.endpoint)
		headers = {
			'Accept': 'application/json; charset=utf8',
			'Content-Type': 'application/json; charset=utf8',
			'X-API-Key': self.client.apiKey,
		}
		r = requests.post(url, json=greetRequest, headers=headers)
		if r.status_code != 200:
			raise OtoError(message="status code: {}".format(r.status_code))
		j = r.json()
		if 'error' in j:
			err = j.get('error')
			if err != '':
				raise OtoError(message=err)
		return j
	
class Ignorer:
	"""Ignorer gets ignored by the tooling."""

	def __init__(self, client):
		self.client = client
	
	def ignore(self, ignoreRequest):
		""""""
		url = "{}/Ignorer.Ignore".format(self.client.endpoint)
		headers = {
			'Accept': 'application/json; charset=utf8',
			'Content-Type': 'application/json; charset=utf8',
			'X-API-Key': self.client.apiKey,
		}
		r = requests.post(url, json=ignoreRequest, headers=headers)
		if r.status_code != 200:
			raise OtoError(message="status code: {}".format(r.status_code))
		j = r.json()
		if 'error' in j:
			err = j.get('error')
			if err != '':
				raise OtoError(message=err)
		return j
	
class Welcomer:
	"""Welcomer welcomes people."""

	def __init__(self, client):
		self.client = client
	
	def welcome(self, welcomeRequest):
		"""Welcome makes a welcome message for somebody."""
		url = "{}/Welcomer.Welcome".format(self.client.endpoint)
		headers = {
			'Accept': 'application/json; charset=utf8',
			'Content-Type': 'application/json; charset=utf8',
			'X-API-Key': self.client.apiKey,
		}
		r = requests.post(url, json=welcomeRequest, headers=headers)
		if r.status_code != 200:
			raise OtoError(message="status code: {}".format(r.status_code))
		j = r.json()
		if 'error' in j:
			err = j.get('error')
			if err != '':
				raise OtoError(message=err)
		return j
	


class Error(Exception):
	"""Base class for exceptions in this module."""
	pass

class OtoError(Error):
	"""Exception raised for an error making the request.

	Attributes:
		message -- explanation of the error
	"""

	def __init__(self, message):
		self.message = message

class FieldError(Error):
	"""Exception raised for missing fields.

	Attributes:
		field -- field which the error occurred
		message -- explanation of the error
	"""

	def __init__(self, field, message):
		self.field = field
		self.message = message
