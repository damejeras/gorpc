//  Code generated by gorpc; DO NOT EDIT.

import Foundation

class OtoClient {
	var endpoint: String
	init(withEndpoint url: String) {
		self.endpoint = url
	}
}


// GreeterService is a polite API. You will love it.
class GreeterService {
	var client: OtoClient
	init(withClient client: OtoClient) {
		self.client = client
	}

	// GetGreetings gets a range of saved Greetings.
	func getGreetings(withRequest getGreetingsRequest: GetGreetingsRequest, completion: @escaping (_ response: GetGreetingsResponse?, _ error: Error?) -> ()) {
		let url = "\(self.client.endpoint)/GreeterService.GetGreetings"
		var request = URLRequest(url: URL(string: url)!)
		request.httpMethod = "POST"
		request.addValue("application/json; charset=utf-8", forHTTPHeaderField: "Content-Type")
		request.addValue("application/json; charset=utf-8", forHTTPHeaderField: "Accept")
		var jsonData: Data
		do {
			jsonData = try JSONEncoder().encode(getGreetingsRequest)
		} catch let err {
			completion(nil, err)
			return
		}
		request.httpBody = jsonData
		let session = URLSession(configuration: URLSessionConfiguration.default)
		let task = session.dataTask(with: request) { (data, response, error) in
			if let err = error {
				completion(nil, err)
				return
			}
            if let httpResponse = response as? HTTPURLResponse {
                if (httpResponse.statusCode != 200) {
                    let err = OtoError("\(url): \(httpResponse.statusCode) status code")
                    completion(nil, err)
                    return
                }
            }
			var getGreetingsResponse: GetGreetingsResponse
			do {
				getGreetingsResponse = try JSONDecoder().decode(GetGreetingsResponse.self, from: data!)
			} catch let err {
				completion(nil, err)
				return
			}
            if let serviceErr = getGreetingsResponse.error {
                if (serviceErr != "") {
                    let err = OtoError(serviceErr)
                        completion(nil, err)
                        return
                }
            }
			completion(getGreetingsResponse, nil)
		}
		task.resume()
	}

	// Greet creates a Greeting for one or more people.
	func greet(withRequest greetRequest: GreetRequest, completion: @escaping (_ response: GreetResponse?, _ error: Error?) -> ()) {
		let url = "\(self.client.endpoint)/GreeterService.Greet"
		var request = URLRequest(url: URL(string: url)!)
		request.httpMethod = "POST"
		request.addValue("application/json; charset=utf-8", forHTTPHeaderField: "Content-Type")
		request.addValue("application/json; charset=utf-8", forHTTPHeaderField: "Accept")
		var jsonData: Data
		do {
			jsonData = try JSONEncoder().encode(greetRequest)
		} catch let err {
			completion(nil, err)
			return
		}
		request.httpBody = jsonData
		let session = URLSession(configuration: URLSessionConfiguration.default)
		let task = session.dataTask(with: request) { (data, response, error) in
			if let err = error {
				completion(nil, err)
				return
			}
            if let httpResponse = response as? HTTPURLResponse {
                if (httpResponse.statusCode != 200) {
                    let err = OtoError("\(url): \(httpResponse.statusCode) status code")
                    completion(nil, err)
                    return
                }
            }
			var greetResponse: GreetResponse
			do {
				greetResponse = try JSONDecoder().decode(GreetResponse.self, from: data!)
			} catch let err {
				completion(nil, err)
				return
			}
            if let serviceErr = greetResponse.error {
                if (serviceErr != "") {
                    let err = OtoError(serviceErr)
                        completion(nil, err)
                        return
                }
            }
			completion(greetResponse, nil)
		}
		task.resume()
	}

}

// Ignorer gets ignored by the tooling.
class Ignorer {
	var client: OtoClient
	init(withClient client: OtoClient) {
		self.client = client
	}

		func ignore(withRequest ignoreRequest: IgnoreRequest, completion: @escaping (_ response: IgnoreResponse?, _ error: Error?) -> ()) {
		let url = "\(self.client.endpoint)/Ignorer.Ignore"
		var request = URLRequest(url: URL(string: url)!)
		request.httpMethod = "POST"
		request.addValue("application/json; charset=utf-8", forHTTPHeaderField: "Content-Type")
		request.addValue("application/json; charset=utf-8", forHTTPHeaderField: "Accept")
		var jsonData: Data
		do {
			jsonData = try JSONEncoder().encode(ignoreRequest)
		} catch let err {
			completion(nil, err)
			return
		}
		request.httpBody = jsonData
		let session = URLSession(configuration: URLSessionConfiguration.default)
		let task = session.dataTask(with: request) { (data, response, error) in
			if let err = error {
				completion(nil, err)
				return
			}
            if let httpResponse = response as? HTTPURLResponse {
                if (httpResponse.statusCode != 200) {
                    let err = OtoError("\(url): \(httpResponse.statusCode) status code")
                    completion(nil, err)
                    return
                }
            }
			var ignoreResponse: IgnoreResponse
			do {
				ignoreResponse = try JSONDecoder().decode(IgnoreResponse.self, from: data!)
			} catch let err {
				completion(nil, err)
				return
			}
            if let serviceErr = ignoreResponse.error {
                if (serviceErr != "") {
                    let err = OtoError(serviceErr)
                        completion(nil, err)
                        return
                }
            }
			completion(ignoreResponse, nil)
		}
		task.resume()
	}

}

// Welcomer welcomes people.
class Welcomer {
	var client: OtoClient
	init(withClient client: OtoClient) {
		self.client = client
	}

	// Welcome makes a welcome message for somebody.
	func welcome(withRequest welcomeRequest: WelcomeRequest, completion: @escaping (_ response: WelcomeResponse?, _ error: Error?) -> ()) {
		let url = "\(self.client.endpoint)/Welcomer.Welcome"
		var request = URLRequest(url: URL(string: url)!)
		request.httpMethod = "POST"
		request.addValue("application/json; charset=utf-8", forHTTPHeaderField: "Content-Type")
		request.addValue("application/json; charset=utf-8", forHTTPHeaderField: "Accept")
		var jsonData: Data
		do {
			jsonData = try JSONEncoder().encode(welcomeRequest)
		} catch let err {
			completion(nil, err)
			return
		}
		request.httpBody = jsonData
		let session = URLSession(configuration: URLSessionConfiguration.default)
		let task = session.dataTask(with: request) { (data, response, error) in
			if let err = error {
				completion(nil, err)
				return
			}
            if let httpResponse = response as? HTTPURLResponse {
                if (httpResponse.statusCode != 200) {
                    let err = OtoError("\(url): \(httpResponse.statusCode) status code")
                    completion(nil, err)
                    return
                }
            }
			var welcomeResponse: WelcomeResponse
			do {
				welcomeResponse = try JSONDecoder().decode(WelcomeResponse.self, from: data!)
			} catch let err {
				completion(nil, err)
				return
			}
            if let serviceErr = welcomeResponse.error {
                if (serviceErr != "") {
                    let err = OtoError(serviceErr)
                        completion(nil, err)
                        return
                }
            }
			completion(welcomeResponse, nil)
		}
		task.resume()
	}

}



// GetGreetingsRequest is the request object for GreeterService.GetGreetings.
struct GetGreetingsRequest: Encodable, Decodable {

	// Page describes which page of data to get.
	var page: services.Page?

}

// GetGreetingsResponse is the respponse object for GreeterService.GetGreetings.
struct GetGreetingsResponse: Encodable, Decodable {

		var greetings: Greeting?

	// Error is string explaining what went wrong. Empty if everything was fine.
	var error: String?

}

// GreetRequest is the request object for GreeterService.Greet.
struct GreetRequest: Encodable, Decodable {

	// Names are the names of the people to greet.
	var names: String?

}

// GreetResponse is the response object containing a person's greeting.
struct GreetResponse: Encodable, Decodable {

	// Greeting is the generated Greeting.
	var greeting: Greeting?

	// Error is string explaining what went wrong. Empty if everything was fine.
	var error: String?

}

// Greeting contains the pleasentry.
struct Greeting: Encodable, Decodable {

	// Text is the message.
	var text: String?

}

// IgnoreRequest should get ignored.
struct IgnoreRequest: Encodable, Decodable {

}

// IgnoreResponse should get ignored.
struct IgnoreResponse: Encodable, Decodable {

	// Error is string explaining what went wrong. Empty if everything was fine.
	var error: String?

}

struct Page: Encodable, Decodable {

		var cursor: String?

		var orderField: String?

		var orderAsc: Bool?

}

// WelcomeRequest is the request object for Welcomer.Welcome.
struct WelcomeRequest: Encodable, Decodable {

	// To is the address of the person to send the message to.
	var to: String?

	// Name is the name of the person to welcome.
	var name: String?

	// The number of times to send the message.
	var times: Double?

	// NewCustomer indicates whether this is a new customer or not.
	var newCustomer: Bool?

}

// WelcomeResponse is the response object for Welcomer.Welcome.
struct WelcomeResponse: Encodable, Decodable {

	// Message is the welcome message.
	var message: String?

	// Error is string explaining what went wrong. Empty if everything was fine.
	var error: String?

}


struct OtoError: LocalizedError
{
    var errorDescription: String? { return message }
    var failureReason: String? { return message }
    var recoverySuggestion: String? { return "" }
    var helpAnchor: String? { return "" }

    private var message : String

    init(_ description: String) {
        message = description
    }
}